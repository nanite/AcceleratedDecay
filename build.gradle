plugins {
    id "architectury-plugin" version "3.4-SNAPSHOT"
    id "dev.architectury.loom" version "1.4-SNAPSHOT" apply false
    id "me.modmuss50.mod-publish-plugin" version "0.4.5"
}

architectury {
    minecraft = rootProject.minecraft_version
}

subprojects {
    apply plugin: "dev.architectury.loom"

    loom {
        silentMojangMappingsLicense()
    }

    dependencies {
        minecraft "com.mojang:minecraft:${rootProject.minecraft_version}"
        // The following line declares the mojmap mappings, you may use other mappings as well
        mappings loom.officialMojangMappings()
        // The following line declares the yarn mappings you may select this one as well.
        // mappings "net.fabricmc:yarn:1.18.2+build.4:v2"
    }
}

allprojects {
    apply plugin: "java"
    apply plugin: "architectury-plugin"
    apply plugin: "maven-publish"

    ext.ENV = System.getenv()
    ext.SNAPSHOT = ENV.SNAPSHOT != null && (ENV.SNAPSHOT == "true" || ENV.SNAPSHOT == true)

    archivesBaseName = rootProject.archives_base_name
    version = "${rootProject.mod_version}" + (SNAPSHOT ? "-SNAPSHOT" : "")
    group = rootProject.maven_group

    repositories {
    }

    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
        options.release = 8
    }

    java {
        withSourcesJar()
    }

    publishing {
        repositories {
            if (providers.environmentVariable("SAPS_TOKEN").isPresent()) {
                maven {
                    url "https://maven.saps.dev/${providers.environmentVariable("SNAPSHOT").map { "snapshots" }.getOrElse("releases")}"
                    credentials {
                        username = "errormikey"
                        password = "${providers.environmentVariable("SAPS_TOKEN").get()}"
                    }
                }
            }
        }
    }
}

publishMods {
    dryRun = providers.environmentVariable("CURSE_TOKEN").getOrNull() == null
    changelog = file("./CHANGELOG.md").text
    version = "${mod_version}"
    type = STABLE

    def fabricOptions = publishOptions {
        file = project.provider { project(":fabric").tasks.remapJar }.flatMap { it.archiveFile }
        displayName = "[FABRIC][${rootProject.minecraft_version}] ${project.name} ${mod_version}"
        modLoaders.add("fabric")
    }

    def forgeOptions = publishOptions {
        file = project.provider { project(":forge").tasks.remapJar }.flatMap { it.archiveFile }
        displayName = "[FORGE][${rootProject.minecraft_version}] ${project.name} ${mod_version}"
        modLoaders.add("forge")
    }

    def curseForgeOptions = curseforgeOptions {
        accessToken = providers.environmentVariable("CURSE_TOKEN")
        projectId = "${curseforge_id}"
        minecraftVersions.add("${minecraft_version}")
    }

    def modrinthOptions = modrinthOptions {
        accessToken = providers.environmentVariable("MODRINTH_TOKEN")
        projectId = "${modrinth_id}"
        minecraftVersions.add("${minecraft_version}")
    }

    curseforge("curseforgeFabric") {
        from(curseForgeOptions, fabricOptions)
        requires {
            slug = "fabric-api"
        }
    }

    curseforge("curseforgeForge") {
        from(curseForgeOptions, forgeOptions)
    }

    modrinth("modrinthFabric") {
        from(modrinthOptions, fabricOptions)
        requires {
            slug = "fabric-api"
        }
    }

    modrinth("modrinthForge") {
        from(modrinthOptions, forgeOptions)
    }

    github {
        file = project.provider { project(":forge").tasks.remapJar }.flatMap { it.archiveFile }
        additionalFiles.from project.provider { project(":fabric").tasks.remapJar }.flatMap { it.archiveFile }

        repository = "${project.github_repo}"
        accessToken = providers.environmentVariable("GITHUB_TOKEN")
        commitish = providers.environmentVariable("GITHUB_SHA").orElse("dryRun")
        tagName = providers.environmentVariable("GITHUB_REF_NAME").orElse("dryRun")
    }
}
